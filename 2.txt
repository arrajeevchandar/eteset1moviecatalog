

Got it ‚úÖ
You want a Node.js + Express.js + MySQL backend with a movie catalog system, REST API endpoints, Nodemon for development, and a Tailwind CSS styled frontend.

Here‚Äôs a step-by-step full setup for you:

1. MySQL Database Setup

Run these SQL commands:

CREATE DATABASE movies_db;

USE movies_db;

CREATE TABLE movies (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    director VARCHAR(255),
    genre VARCHAR(100),
    release_year INT,
    rating DECIMAL(2,1) -- e.g., 8.5
);

2. Project Initialization

In your project folder:

mkdir movie-catalog
cd movie-catalog
npm init -y
npm install express mysql2 nodemon cors body-parser


In package.json, add under scripts:

"scripts": {
  "dev": "nodemon server.js"
}

3. Server Setup (server.js)
const express = require("express");
const mysql = require("mysql2");
const bodyParser = require("body-parser");
const cors = require("cors");

const app = express();
app.use(cors());
app.use(bodyParser.json());

// MySQL connection
const db = mysql.createConnection({
  host: "localhost",
  user: "root",       // change if needed
  password: "",       // change if you set password
  database: "movies_db"
});

db.connect(err => {
  if (err) {
    console.error("Database connection failed:", err);
    return;
  }
  console.log("Connected to MySQL!");
});

// Routes

// GET all movies
app.get("/movies", (req, res) => {
  db.query("SELECT * FROM movies", (err, results) => {
    if (err) return res.status(500).json({ error: err });
    res.json(results);
  });
});

// POST add a new movie
app.post("/movies", (req, res) => {
  const { title, director, genre, release_year, rating } = req.body;
  db.query(
    "INSERT INTO movies (title, director, genre, release_year, rating) VALUES (?, ?, ?, ?, ?)",
    [title, director, genre, release_year, rating],
    (err, result) => {
      if (err) return res.status(500).json({ error: err });
      res.json({ message: "Movie added!", id: result.insertId });
    }
  );
});

// PUT update a movie
app.put("/movies/:id", (req, res) => {
  const { id } = req.params;
  const { title, director, genre, release_year, rating } = req.body;
  db.query(
    "UPDATE movies SET title=?, director=?, genre=?, release_year=?, rating=? WHERE id=?",
    [title, director, genre, release_year, rating, id],
    (err, result) => {
      if (err) return res.status(500).json({ error: err });
      res.json({ message: "Movie updated!" });
    }
  );
});

// DELETE a movie
app.delete("/movies/:id", (req, res) => {
  const { id } = req.params;
  db.query("DELETE FROM movies WHERE id=?", [id], (err, result) => {
    if (err) return res.status(500).json({ error: err });
    res.json({ message: "Movie deleted!" });
  });
});

// Start server
app.listen(5000, () => {
  console.log("Server running on http://localhost:5000");
});


Run server:

npm run dev

4. Frontend (index.html + Tailwind)

Install Tailwind via CDN for simplicity:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Movie Catalog</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 text-gray-900">

  <div class="container mx-auto p-6">
    <h1 class="text-3xl font-bold mb-6 text-center">üé¨ Movie Catalog</h1>

    <!-- Movie Form -->
    <form id="movieForm" class="bg-white shadow-md rounded p-4 mb-6">
      <div class="grid grid-cols-2 gap-4">
        <input type="text" id="title" placeholder="Title" class="border p-2 rounded" required>
        <input type="text" id="director" placeholder="Director" class="border p-2 rounded">
        <input type="text" id="genre" placeholder="Genre" class="border p-2 rounded">
        <input type="number" id="release_year" placeholder="Release Year" class="border p-2 rounded">
        <input type="number" step="0.1" id="rating" placeholder="Rating" class="border p-2 rounded">
      </div>
      <button type="submit" class="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
        Add Movie
      </button>
    </form>

    <!-- Movies List -->
    <div id="moviesList" class="grid gap-4"></div>
  </div>

  <script>
    const API_URL = "http://localhost:5000/movies";

    async function fetchMovies() {
      const res = await fetch(API_URL);
      const movies = await res.json();
      const list = document.getElementById("moviesList");
      list.innerHTML = "";
      movies.forEach(movie => {
        const div = document.createElement("div");
        div.className = "bg-white shadow p-4 rounded flex justify-between";
        div.innerHTML = `
          <div>
            <h2 class="text-xl font-semibold">${movie.title}</h2>
            <p class="text-sm">üé¨ Director: ${movie.director || "N/A"}</p>
            <p class="text-sm">üìÄ Genre: ${movie.genre || "N/A"}</p>
            <p class="text-sm">üìÖ Year: ${movie.release_year || "N/A"}</p>
            <p class="text-sm">‚≠ê Rating: ${movie.rating || "N/A"}</p>
          </div>
          <button onclick="deleteMovie(${movie.id})" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded">
            Delete
          </button>
        `;
        list.appendChild(div);
      });
    }

    async function deleteMovie(id) {
      await fetch(`${API_URL}/${id}`, { method: "DELETE" });
      fetchMovies();
    }

    document.getElementById("movieForm").addEventListener("submit", async e => {
      e.preventDefault();
      const movie = {
        title: document.getElementById("title").value,
        director: document.getElementById("director").value,
        genre: document.getElementById("genre").value,
        release_year: document.getElementById("release_year").value,
        rating: document.getElementById("rating").value,
      };
      await fetch(API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(movie),
      });
      e.target.reset();
      fetchMovies();
    });

    fetchMovies();
  </script>
</body>
</html>


‚úÖ Now you have:

Backend: Node.js/Express + MySQL (CRUD API)

Frontend: Tailwind UI (form + movie list)

Nodemon for auto-restart

Do you want me to also add Update/Edit movie functionality in the frontend (not just Delete + Add)?

You said:
yes
ChatGPT said:

Perfect üëç
Let‚Äôs extend the frontend (index.html + JS) so you can edit/update movies in addition to add/delete.

üîπ Updated Frontend (index.html)

Replace your <script> block with this version ‚¨áÔ∏è

<script>
  const API_URL = "http://localhost:5000/movies";
  let editId = null; // track movie being edited

  // Fetch all movies
  async function fetchMovies() {
    const res = await fetch(API_URL);
    const movies = await res.json();
    const list = document.getElementById("moviesList");
    list.innerHTML = "";

    movies.forEach(movie => {
      const div = document.createElement("div");
      div.className = "bg-white shadow p-4 rounded flex justify-between items-center";
      div.innerHTML = `
        <div>
          <h2 class="text-xl font-semibold">${movie.title}</h2>
          <p class="text-sm">üé¨ Director: ${movie.director || "N/A"}</p>
          <p class="text-sm">üìÄ Genre: ${movie.genre || "N/A"}</p>
          <p class="text-sm">üìÖ Year: ${movie.release_year || "N/A"}</p>
          <p class="text-sm">‚≠ê Rating: ${movie.rating || "N/A"}</p>
        </div>
        <div class="flex gap-2">
          <button onclick="editMovie(${movie.id}, '${movie.title}', '${movie.director}', '${movie.genre}', ${movie.release_year}, ${movie.rating})" 
            class="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded">
            Edit
          </button>
          <button onclick="deleteMovie(${movie.id})" 
            class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded">
            Delete
          </button>
        </div>
      `;
      list.appendChild(div);
    });
  }

  // Delete movie
  async function deleteMovie(id) {
    await fetch(`${API_URL}/${id}`, { method: "DELETE" });
    fetchMovies();
  }

  // Edit movie (fill form)
  function editMovie(id, title, director, genre, release_year, rating) {
    editId = id;
    document.getElementById("title").value = title;
    document.getElementById("director").value = director;
    document.getElementById("genre").value = genre;
    document.getElementById("release_year").value = release_year;
    document.getElementById("rating").value = rating;

    document.getElementById("submitBtn").innerText = "Update Movie";
    document.getElementById("submitBtn").classList.remove("bg-blue-500", "hover:bg-blue-600");
    document.getElementById("submitBtn").classList.add("bg-green-500", "hover:bg-green-600");
  }

  // Add or Update movie
  document.getElementById("movieForm").addEventListener("submit", async e => {
    e.preventDefault();
    const movie = {
      title: document.getElementById("title").value,
      director: document.getElementById("director").value,
      genre: document.getElementById("genre").value,
      release_year: document.getElementById("release_year").value,
      rating: document.getElementById("rating").value,
    };

    if (editId) {
      // Update movie
      await fetch(`${API_URL}/${editId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(movie),
      });
      editId = null;
      document.getElementById("submitBtn").innerText = "Add Movie";
      document.getElementById("submitBtn").classList.remove("bg-green-500", "hover:bg-green-600");
      document.getElementById("submitBtn").classList.add("bg-blue-500", "hover:bg-blue-600");
    } else {
      // Add movie
      await fetch(API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(movie),
      });
    }

    e.target.reset();
    fetchMovies();
  });

  fetchMovies();
</script>

üîπ Form Update

Change your form button in <form> so it has an id="submitBtn":

<button id="submitBtn" type="submit" 
  class="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
  Add Movie
</button>

üîπ Features Now

‚úÖ Add Movie (blue button)

‚úÖ Edit Movie (fills form ‚Üí button turns green ‚ÄúUpdate Movie‚Äù)

‚úÖ Update Movie (saves changes)

‚úÖ Delete Movie


Step 1: Prepare Supabase (Database)

Go to https://supabase.com/
 and create an account.

Create a new project ‚Üí name it movies-db.

Supabase uses Postgres, so we‚Äôll tweak the schema:

create table movies (
  id serial primary key,
  title text not null,
  director text,
  genre text,
  release_year int,
  rating numeric(2,1)
);


Insert some sample rows if you like:

insert into movies (title, director, genre, release_year, rating)
values ('Inception', 'Christopher Nolan', 'Sci-Fi', 2010, 8.8);


Go to Project Settings ‚Üí Database and copy:

Host

Port

Database

User

Password

We‚Äôll use these in the backend connection string.

üîπ Step 2: Adapt Backend for Supabase

Instead of MySQL, install pg:

npm install pg


Update your server.js:

const express = require("express");
const { Pool } = require("pg");
const bodyParser = require("body-parser");
const cors = require("cors");

const app = express();
app.use(cors());
app.use(bodyParser.json());

// Supabase/Postgres connection
const pool = new Pool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME,
  port: 5432,
  ssl: { rejectUnauthorized: false } // required for Supabase
});

// Routes
app.get("/movies", async (req, res) => {
  try {
    const result = await pool.query("SELECT * FROM movies ORDER BY id");
    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post("/movies", async (req, res) => {
  const { title, director, genre, release_year, rating } = req.body;
  try {
    const result = await pool.query(
      "INSERT INTO movies (title, director, genre, release_year, rating) VALUES ($1,$2,$3,$4,$5) RETURNING id",
      [title, director, genre, release_year, rating]
    );
    res.json({ message: "Movie added!", id: result.rows[0].id });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.put("/movies/:id", async (req, res) => {
  const { id } = req.params;
  const { title, director, genre, release_year, rating } = req.body;
  try {
    await pool.query(
      "UPDATE movies SET title=$1, director=$2, genre=$3, release_year=$4, rating=$5 WHERE id=$6",
      [title, director, genre, release_year, rating, id]
    );
    res.json({ message: "Movie updated!" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.delete("/movies/:id", async (req, res) => {
  const { id } = req.params;
  try {
    await pool.query("DELETE FROM movies WHERE id=$1", [id]);
    res.json({ message: "Movie deleted!" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.listen(5000, () => console.log("Server running on port 5000"));

üîπ Step 3: Add Environment Variables

In your project root, create .env.local:

DB_HOST=your-supabase-host.supabase.co
DB_USER=your-db-username
DB_PASS=your-db-password
DB_NAME=postgres

üîπ Step 4: Prepare for Vercel Deployment

Install vercel CLI:

npm install -g vercel


Login:

vercel login


In package.json, add a start script:

"scripts": {
  "dev": "nodemon server.js",
  "start": "node server.js"
}


Deploy:

vercel


Vercel will ask where your app is ‚Üí choose the project folder.

Go to your project on vercel.com/dashboard
, then:

Settings ‚Üí Environment Variables

Add your DB_HOST, DB_USER, DB_PASS, DB_NAME

Redeploy the project ‚Üí your API will be live at something like:

https://movie-catalog.vercel.app/api

üîπ Step 5: Connect Frontend to Vercel API

In your index.html, update:

const API_URL = "https://your-vercel-project.vercel.app/movies";


Now your Tailwind frontend will call the deployed backend.

‚úÖ At this point:

Backend runs on Vercel with Supabase DB.

Frontend (can also be hosted on Vercel as static files).

üëâ Do you want me to merge the frontend and backend into a single Vercel project (so one deploy handles both), or would you prefer to keep frontend static + backend API separately?